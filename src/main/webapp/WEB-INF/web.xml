<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xmlns="http://java.sun.com/xml/ns/javaee"
         xsi:schemaLocation="http://java.sun.com/xml/ns/javaee
         http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd"
         id="weiyuedu" version="3.0">
    <display-name>weiyuedu-manage</display-name>



    <!--shiro安全框架过滤器,这个filter-mapping一般放在所有filter-mapping之前,以到达shrio第一个拦截过滤请求-->
    <!--<filter>-->
        <!--<filter-name>shiroFilter</filter-name>-->
        <!--<filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>-->
        <!--<init-param>-->
            <!--<param-name>targetFilterLifecycle</param-name>-->
            <!--<param-value>true</param-value>-->
            <!--&lt;!&ndash;下面这个方式和上面的效果是一致的，只不过名称可以自定义&ndash;&gt;-->
            <!--&lt;!&ndash;<param-name>targetBeanName</param-name>&ndash;&gt;-->
            <!--&lt;!&ndash;<param-value>Spring-bean-name</param-value>&ndash;&gt;-->
        <!--</init-param>-->
    <!--</filter>-->
    <!--shiro安全框架过滤器拦截所有请求-->
    <!--<filter-mapping>-->
        <!--<filter-name>shiroFilter</filter-name>-->
        <!--<url-pattern>/*</url-pattern>-->
    <!--</filter-mapping>-->

    <!--日志监听器-->
    <context-param>
        <param-name>log4jConfigLocation</param-name>
        <param-value>classpath:resource/log4j.properties</param-value>
    </context-param>
    <listener>
        <listener-class>org.springframework.web.util.Log4jConfigListener</listener-class>
    </listener>

    <!--加载spring容器,启动容器监听器-->
    <context-param>
        <param-name>contextConfigLocation</param-name>
        <param-value>classpath:spring/applicationContext-*.xml</param-value>
    </context-param>
    <listener>
        <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
    </listener>

    <!-- 防止Spring内存溢出监听器 -->
    <listener>
        <listener-class>org.springframework.web.util.IntrospectorCleanupListener</listener-class>
    </listener>


    <!--乱码过滤器-->
    <filter>
        <filter-name>CharacterEncodingFilter</filter-name>
        <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
    </filter>
    <filter-mapping>
        <filter-name>CharacterEncodingFilter</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>

    <!--前端控制器-->
    <servlet>
        <servlet-name>DispatcherServlet</servlet-name>
        <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
        <init-param>
            <param-name>contextConfigLocation</param-name>
            <param-value>classpath:spring/springmvc.xml</param-value>
        </init-param>
        <load-on-startup>1</load-on-startup>
    </servlet>
    <servlet-mapping>
        <servlet-name>DispatcherServlet</servlet-name>
        <!--／会拦截所有请求包括静态文件，需要在sprringmvc.xml中添加静态文件的映射-->
        <url-pattern>/</url-pattern>
    </servlet-mapping>

    <!-- 出错页面定义,如果不设置的话，服务器会使用内部定义的错误页面 -->
    <!--<error-page>-->
        <!--<exception-type>java.lang.Throwable</exception-type>-->
        <!--<location>/WEB-INF/ftl/errors/500.jsp</location>-->
    <!--</error-page>-->
    <!--<error-page>-->
        <!--<error-code>500</error-code>-->
        <!--<location>/WEB-INF/ftl/errors/500.jsp</location>-->
    <!--</error-page>-->
    <!--<error-page>-->
        <!--<error-code>404</error-code>-->
        <!--<location>/WEB-INF/ftl/errors/404.jsp</location>-->
    <!--</error-page>-->
    <welcome-file-list>
        <welcome-file>index.html</welcome-file>
        <welcome-file>index.htm</welcome-file>
        <welcome-file>index.jsp</welcome-file>
        <welcome-file>index.ftl</welcome-file>
        <welcome-file>default.html</welcome-file>
        <welcome-file>default.htm</welcome-file>
        <welcome-file>default.jsp</welcome-file>
    </welcome-file-list>

</web-app>